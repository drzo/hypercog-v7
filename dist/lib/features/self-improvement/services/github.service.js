import { loggerService } from '$lib/features/core/services';
import { GitHubApiUtil } from '../utils/github-api';
export class GitHubService {
    api;
    owner;
    repo;
    constructor() {
        const apiKey = process.env.GIT_HUB_API_KEY;
        if (!apiKey) {
            throw new Error('GitHub API key not configured');
        }
        this.api = new GitHubApiUtil(apiKey);
        const repoUrl = process.env.GIT_HUB_REPO_URL;
        if (!repoUrl) {
            throw new Error('GitHub repo URL not configured');
        }
        const match = repoUrl.match(/github\.com\/([^/]+)\/([^/]+)/);
        if (!match) {
            throw new Error('Invalid GitHub repo URL');
        }
        [, this.owner, this.repo] = match;
    }
    async createImprovementPR(improvement) {
        try {
            // Get default branch ref
            const defaultBranch = await this.getDefaultBranch();
            // Create new branch
            const branchName = `improvement/${improvement.id}`;
            await this.createBranch(branchName, defaultBranch.sha);
            // Create commits for changes
            for (const change of improvement.changes) {
                await this.createCommit(branchName, change);
            }
            // Create pull request
            await this.createPullRequest(branchName, improvement);
            loggerService.info('Created improvement PR', { improvement });
        }
        catch (error) {
            loggerService.error('Failed to create improvement PR', error);
            throw error;
        }
    }
    async getDefaultBranch() {
        return this.api.request(`/repos/${this.owner}/${this.repo}/git/refs/heads/main`);
    }
    async createBranch(name, sha) {
        return this.api.request(`/repos/${this.owner}/${this.repo}/git/refs`, {
            method: 'POST',
            body: {
                ref: `refs/heads/${name}`,
                sha
            }
        });
    }
    async createCommit(branch, change) {
        // Get current file content if it exists
        const currentContent = await this.getFileContent(change.path);
        return this.api.request(`/repos/${this.owner}/${this.repo}/contents/${change.path}`, {
            method: 'PUT',
            body: {
                message: `Update ${change.path}`,
                content: Buffer.from(JSON.stringify(change.after)).toString('base64'),
                sha: currentContent?.sha,
                branch
            }
        });
    }
    async getFileContent(path) {
        try {
            return await this.api.request(`/repos/${this.owner}/${this.repo}/contents/${path}`);
        }
        catch {
            return null;
        }
    }
    async createPullRequest(branch, improvement) {
        return this.api.request(`/repos/${this.owner}/${this.repo}/pulls`, {
            method: 'POST',
            body: {
                title: improvement.description,
                body: this.generatePRDescription(improvement),
                head: branch,
                base: 'main'
            }
        });
    }
    generatePRDescription(improvement) {
        return `
# ${improvement.description}

## Type: ${improvement.type}
## Priority: ${improvement.priority}
## Estimated Impact: ${improvement.estimatedImpact}

## Changes:
${improvement.changes.map(c => `- ${c.path}`).join('\n')}

Generated by HyperCog Self-Improvement System
    `.trim();
    }
}
export const githubService = new GitHubService();
